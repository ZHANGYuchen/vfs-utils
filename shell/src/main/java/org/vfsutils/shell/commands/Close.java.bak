package org.vfsutils.shell.commands;

import java.util.Iterator;
import java.util.List;

import org.apache.commons.vfs.FileName;
import org.apache.commons.vfs.FileObject;
import org.apache.commons.vfs.FileSystem;
import org.apache.commons.vfs.FileSystemException;
import org.apache.commons.vfs.FileType;
import org.vfsutils.shell.Arguments;
import org.vfsutils.shell.CommandInfo;
import org.vfsutils.shell.Engine;

public class Close extends AbstractOpenClose {
	

	public Close() {
		super("close", new CommandInfo("Close the connection", "<uri>"));
	}
	
	public void execute(Arguments args, Engine engine)
			throws IllegalArgumentException, FileSystemException {
		
		args.assertSize(1);
		String path = args.getArgument(0);
		close(path, engine);
	}
	
	protected void close (String path, Engine engine) throws FileSystemException {
		FileObject file = engine.pathToFile(path);
		close(file, engine);
	}
	
	protected void close(FileObject file, Engine engine) throws FileSystemException {
		Set openFs = getOpenFs(engine);
		FileName root = file.getName().getRoot();
		if (openFs.contains(root)) {
			//close the filesystem
			FileSystem fs = file.getFileSystem();
			engine.getMgr().closeFileSystem(fs);
			//remove from list
    		openFs.remove(root);
    		engine.println("Closed " + engine.toString(root));
		}
	}
	
	protected void closeAll(Engine engine) throws FileSystemException {
		Set openFs = getOpenFs(engine);
		Iterator iterator = openFs.iterator();
		while (iterator.hasNext()) {
			//get file from name
			FileName root = (FileName) iterator.next();			
			FileObject file = engine.getMgr().resolveFile(root.getPath());
			//close the filesystem
			FileSystem fs = file.getFileSystem();
			engine.getMgr().closeFileSystem(fs);
			//remove from list
    		openFs.remove(root);
    		engine.println("Closed " + engine.toString(root));
		}
	}

}
